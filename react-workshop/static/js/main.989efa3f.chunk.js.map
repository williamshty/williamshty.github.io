{"version":3,"sources":["components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","todoItems","deleteItem","editItem","length","map","todo","react_default","a","createElement","className","key","id","content","onClick","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDeleteItem","currentItems","state","filter","item","setState","handleAddItem","newItemContent","newItem","Math","random","concat","toConsumableArray","showAddTodo","triggerEditItem","editItemContent","editItemId","showEditTodo","handleEditItem","items","itemIndex","findIndex","obj","handleAddContentChange","e","target","value","handleEditContentChange","_this2","components_TodoList","onSubmit","preventDefault","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.989efa3f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst TodoList = (props) => {\r\n    const { todoItems, deleteItem, editItem } = props\r\n    if(todoItems.length){\r\n        return (\r\n            todoItems.map(todo => {\r\n                return <li className=\"collection-item\" key={todo.id}>\r\n                    <div>\r\n                        {todo.content}\r\n                        <div className=\"secondary-content\">\r\n                           <i className=\"material-icons\" onClick={()=>{editItem(todo)}}>edit</i>\r\n                           <i className=\"material-icons\" onClick={()=>{deleteItem(todo.id)}}>delete</i>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            })\r\n        )\r\n    } else return(\r\n        <li className=\"collection-item\">\r\n            <h6 className=\"blue-text center\">No more task left!</h6>\r\n          </li>\r\n    )\r\n    \r\n}\r\n\r\nexport default TodoList","import React, { Component } from 'react';\nimport TodoList from './components/TodoList'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      showAddTodo: false,\n      showEditTodo: false,\n      newItemContent:'',\n      editItemContent:'',\n      editItemId:'',\n      todoItems: [\n        {\n          id: 1,\n          content: \"Do 1231 PYP\"\n        },\n        {\n          id: 2,\n          content: \"Fix 2040 bugs\"\n        }\n      ]\n    };\n  }\n  handleDeleteItem = (id) => {\n    let currentItems = this.state.todoItems.filter(item => {\n      return item.id !== id\n    })\n    this.setState({ todoItems: currentItems })\n  }\n  handleAddItem = (newItemContent) =>{\n    let newItem = {}\n    newItem.content = newItemContent\n    newItem.id = Math.random()\n    this.setState({\n      todoItems:[...this.state.todoItems,newItem],\n      newItemContent:'',\n      showAddTodo:false\n    })\n  }\n  triggerEditItem = (item) =>{\n    this.setState({\n      editItemContent:item.content,\n      editItemId:item.id,\n      showEditTodo:!this.state.showEditTodo\n    })\n  }\n  handleEditItem = () =>{\n    let items = this.state.todoItems\n    const itemIndex = items.findIndex(obj => obj.id === this.state.editItemId)\n    items[itemIndex].content = this.state.editItemContent\n    this.setState({\n      todoItems:items,\n      editItemContent:'',\n      editItemId:'',\n      showEditTodo:false\n    })\n  }\n  handleAddContentChange = (e) =>{\n    this.setState({newItemContent:e.target.value})\n  }\n  handleEditContentChange = (e) =>{\n    this.setState({editItemContent:e.target.value})\n  }\n  render() {\n    return (\n      <div className=\"App container\">\n        <ul className=\"collection with-header\">\n          <li className=\"collection-header\">\n            <h4 className=\"blue-text center\">Todos</h4>\n          </li>\n          <TodoList todoItems={this.state.todoItems} deleteItem={this.handleDeleteItem} editItem={this.triggerEditItem}/>\n          <li className=\"collection-item\">\n            <i className=\"material-icons\" onClick={()=>this.setState({showAddTodo:!this.state.showAddTodo})}>add</i>\n          </li>\n        </ul>\n\n          {this.state.showAddTodo &&\n          <form onSubmit={(e)=>{\n            e.preventDefault()\n            this.handleAddItem(this.state.newItemContent)}}>\n            \n            <input\n            value={this.state.newItemContent}\n            onChange={(e)=>this.handleAddContentChange(e)}/>\n            \n            <label>New Task</label>\n          </form>\n          }\n\n          {this.state.showEditTodo &&\n          <form onSubmit={(e)=>{\n            e.preventDefault()\n            this.handleEditItem()}}>\n            \n            <input\n            value={this.state.editItemContent}\n            onChange={(e)=>this.handleEditContentChange(e)}/>\n            \n            <label>Editing Task #{this.state.editItemId}</label>\n          </form>\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}